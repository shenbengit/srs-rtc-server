version: "3.3"
services:
  srs-rtc-server1:
    #image name
    #image: shencoder/srs-rtc-server
    #直接从Dockerfile构建
    build: .
    #自启
    restart: always
    #主机模式  network_mode: host 与 ports不兼容
    # network_mode: host
    #端口
    ports:
      #./config/config.yml--apiConfig.httpPort
      - "19898:19898"
      #./config/config.yml--apiConfig.httpsPort
      - "19899:19899"
      #./config/config.yml--socketIoConfig.httpPort
      - "19998:19998"
      #./config/config.yml--socketIoConfig.httpPort
      - "19999:19999"
    #挂载本地文件
    volumes:
      - ./cert:/home/public/srs-rtc-server/cert
      - ./config1:/home/public/srs-rtc-server/config
      - ./src:/home/public/srs-rtc-server/src
      - ./app.js:/home/public/srs-rtc-server/app.js
      - ./package.json:/home/public/srs-rtc-server/package.json
      - ./package-lock.json:/home/public/srs-rtc-server/package-lock.json
      - ./yarn.lock:/home/public/srs-rtc-server/yarn.lock
    depends_on:
      - mysqldb
      - srs1
      - srs2

  srs-rtc-server2:
    #image name
    #image: shencoder/srs-rtc-server
    #直接从Dockerfile构建
    build: .
    #自启
    restart: always
    #主机模式  network_mode: host 与 ports不兼容
    # network_mode: host
    #端口
    ports:
      #./config/config.yml--apiConfig.httpPort
      - "29898:29898"
      #./config/config.yml--apiConfig.httpsPort
      - "29899:29899"
      #./config/config.yml--socketIoConfig.httpPort
      - "29998:29998"
      #./config/config.yml--socketIoConfig.httpPort
      - "29999:29999"
    #挂载本地文件
    volumes:
      - ./cert:/home/public/srs-rtc-server/cert
      - ./config2:/home/public/srs-rtc-server/config
      - ./src:/home/public/srs-rtc-server/src
      - ./app.js:/home/public/srs-rtc-server/app.js
      - ./package.json:/home/public/srs-rtc-server/package.json
      - ./package-lock.json:/home/public/srs-rtc-server/package-lock.json
      - ./yarn.lock:/home/public/srs-rtc-server/yarn.lock
    depends_on:
      - mysqldb
      - srs1
      - srs2

  mysqldb:
    image: mysql:5.7
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 123456
      ## you can connect to database using below command:
      ## docker exec -it srs-rtc-server-mysqldb-1 mysql -usrs_rtc -Dsrs_rtc -p
      MYSQL_USER: srs_rtc
      MYSQL_PASSWORD: 123456
      MYSQL_DATABASE: srs_rtc
    volumes:
      - "./db/srs_rtc.sql:/docker-entrypoint-initdb.d/1.sql"

  srs1:
    image: registry.cn-hangzhou.aliyuncs.com/ossrs/srs:4
    restart: always
    command: bash -c "/usr/local/srs/objs/srs -c /usr/local/srs/conf/origin1.conf"
    ports:
      - 11935:11935
      - 18080:18080
      - 11985:11985
      - 8001:8001/udp
    volumes:
      - ./srs-conf/origin1.conf:/usr/local/srs/conf/origin1.conf
    environment:
      CANDIDATE: ${CANDIDATE}

  srs2:
    image: registry.cn-hangzhou.aliyuncs.com/ossrs/srs:4
    restart: always
    command: bash -c "/usr/local/srs/objs/srs -c /usr/local/srs/conf/origin2.conf"
    ports:
      - 21935:21935
      - 28080:28080
      - 21985:21985
      - 8002:8002/udp
    volumes:
      - ./srs-conf/origin2.conf:/usr/local/srs/conf/origin2.conf
    environment:
      CANDIDATE: ${CANDIDATE}

  haproxy:
    image: haproxy:latest
    restart: always
    ports:
      - 8888:8888
      - 1935:1935
      - 8080:8080
      - 1985:1985
    volumes:
      - ./srs-conf/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    environment:
      CANDIDATE: ${CANDIDATE}

  httpx:
    image: registry.cn-hangzhou.aliyuncs.com/ossrs/httpx:1
    restart: always
    command: 
      - /bin/sh
      - -c
      - |
        ./bin/httpx-static -https 1990 -ssk ./etc/server.key -ssc ./etc/server.crt -proxy http://$CANDIDATE:1985/rtc -proxy http://$CANDIDATE:8080/
    ports:
      - 1990:1990
    environment:
      CANDIDATE: ${CANDIDATE}
    depends_on:
      - srs1
      - srs2
  nginx:
    # image: nginx:latest
    image: fabiocicerchia/nginx-lua:latest
    restart: always
    ports:
      - "9898:9898"
      - "9899:9899"
      - "9998:9998"
      - "9999:9999"
    environment:
      CANDIDATE: ${CANDIDATE}
    depends_on:
      - srs-rtc-server1
      - srs-rtc-server2
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
      - "./cert/server.pem:/etc/nginx/conf.d/cert/https.crt"
      - "./cert/server.key:/etc/nginx/conf.d/cert/https.key"


